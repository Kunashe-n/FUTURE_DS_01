output$prediction <- renderText({
paste("Predicted Salary Class:", prediction)
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
# Load necessary libraries
library(readxl)
library(dplyr)
library(caret)
library(shiny)
library(randomForest)
# Load the dataset
who_data <- read_excel("C:/Users/Dell 7490/Desktop/who_data_Project_1.xlsx.xlsx")
# Load necessary libraries
library(readxl)
library(dplyr)
library(caret)
library(shiny)
library(randomForest)
# Load the dataset
who_data <- read_excel("who_data_Project_1.xlsx.xlsx")
# Data Preprocessing
who_data <- na.omit(who_data)
who_data$workclass <- as.factor(who_data$workclass)
who_data$education <- as.factor(who_data$education)
who_data$marital_status <- as.factor(who_data$marital_status)
who_data$occupation <- as.factor(who_data$occupation)
who_data$race <- as.factor(who_data$race)
who_data$sex <- as.factor(who_data$sex)
who_data$native_contienent <- as.factor(who_data$native_contienent)
who_data$salary <- as.factor(who_data$salary)  # Assuming salary is a binary outcome
# Split the Data
set.seed(123)  # For reproducibility
train_index <- createDataPartition(who_data$salary, p = 0.8, list = FALSE)
train_data <- who_data[train_index, ]
test_data <- who_data[-train_index, ]
# Build the Prediction Model
model <- randomForest(salary ~ ., data = train_data, importance = TRUE)
# Evaluate the Model
predictions <- predict(model, test_data)
confusionMatrix(predictions, test_data$salary)
ui <- fluidPage(
titlePanel("Salary Prediction Model"),
sidebarLayout(
sidebarPanel(
numericInput("age", "Age:", min = 0, max = 100, value = 30),
selectInput("workclass", "Work Class:", choices = levels(who_data$workclass)),
numericInput("fnlwgt", "Final Weight:", value = 100000),
selectInput("education", "Education:", choices = levels(who_data$education)),
numericInput("education_no_of_years", "Years of Education:", value = 12),
selectInput("marital_status", "Marital Status:", choices = levels(who_data$marital_status)),
selectInput("occupation", "Occupation:", choices = levels(who_data$occupation)),
selectInput("race", "Race:", choices = levels(who_data$race)),
selectInput("sex", "Sex:", choices = levels(who_data$sex)),
numericInput("capital_gain", "Capital Gain:", value = 0),
numericInput("capital_loss", "Capital Loss:", value = 0),
numericInput("working_hours_per_week", "Working Hours per Week:", value = 40),
selectInput("native_contienent", "Native Contienent:", choices = levels(who_data$native_contienent)),  # Corrected spelling
actionButton("predict", "Predict Salary")
),
mainPanel(
textOutput("prediction")  # Added output element
)
)
)
# Server Logic
server <- function(input, output) {
observeEvent(input$predict, {
new_data <- data.frame(
age = input$age,
workclass = factor(input$workclass, levels = levels(who_data$workclass)),
fnlwgt = input$fnlwgt,
education = factor(input$education, levels = levels(who_data$education)),
education_no_of_years = input$education_no_of_years,
marital_status = factor(input$marital_status, levels = levels(who_data$marital_status)),
occupation = factor(input$occupation, levels = levels(who_data$occupation)),
race = factor(input$race, levels = levels(who_data$race)),
sex = factor(input$sex, levels = levels(who_data$sex)),
capital_gain = input$capital_gain,
capital_loss = input$capital_loss,
working_hours_per_week = input$working_hours_per_week,
native_contienent = factor(input$native_contienent, levels = levels(who_data$native_contienent))  # Corrected spelling
)
prediction <- predict(model, new_data)
output$prediction <- renderText({
paste("Predicted Salary Class:", prediction)
})
})
}
# Run the Application
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(caret)
library(dplyr)
library(ggplot2)
library(randomForest)
library(readxl)
# Define UI
ui <- fluidPage(
titlePanel("WHO Data Analysis and Salary Prediction"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Upload Excel File", accept = c(".xlsx")),
actionButton("process", "Process Data"),
h4("Salary Prediction"),
numericInput("age", "Age:", min = 0, max = 100, value = 30),
selectInput("workclass", "Work Class:", ""),
numericInput("fnlwgt", "Final Weight:", value = 100000),
selectInput("education", "Education:", ""),
numericInput("education_no_of_years", "Years of Education:", value = 12),
selectInput("marital_status", "Marital Status:", ""),
selectInput("occupation", "Occupation:", ""),
selectInput("race", "Race:", ""),
selectInput("sex", "Sex:", ""),
numericInput("capital_gain", "Capital Gain:", value = 0),
numericInput("capital_loss", "Capital Loss:", value = 0),
numericInput("working_hours_per_week", "Working Hours per Week:", value = 40),
selectInput("native_contienent", "Native Continent:", ""),
actionButton("predict", "Predict Salary")
),
mainPanel(
plotOutput("correlationPlot"),
verbatimTextOutput("modelSummary"),
textOutput("prediction")
)
)
)
# Define server logic
server <- function(input, output, session) {
who_data <- reactiveVal(NULL)
model <- reactiveVal(NULL)
observeEvent(input$process, {
req(input$file)
# Read the data
data <- read_excel(input$file$datapath)
# Data preprocessing
data <- na.omit(data)
data$workclass <- as.factor(data$workclass)
data$education <- as.factor(data$education)
data$marital_status <- as.factor(data$marital_status)
data$occupation <- as.factor(data$occupation)
data$race <- as.factor(data$race)
data$sex <- as.factor(data$sex)
data$native_contienent <- as.factor(data$native_contienent)
data$salary <- as.factor(data$salary)
who_data(data)
# Update choices for select inputs
updateSelectInput(session, "workclass", choices = levels(data$workclass))
updateSelectInput(session, "education", choices = levels(data$education))
updateSelectInput(session, "marital_status", choices = levels(data$marital_status))
updateSelectInput(session, "occupation", choices = levels(data$occupation))
updateSelectInput(session, "race", choices = levels(data$race))
updateSelectInput(session, "sex", choices = levels(data$sex))
updateSelectInput(session, "native_contienent", choices = levels(data$native_contienent))
# Split the data into training and testing sets
set.seed(123)
trainIndex <- createDataPartition(data$salary, p = 0.8, list = FALSE)
trainData <- data[trainIndex,]
# Build the Prediction Model
rf_model <- randomForest(salary ~ ., data = trainData, importance = TRUE)
model(rf_model)
# Feature selection and correlation plot
numeric_cols <- sapply(trainData, is.numeric)
correlations <- cor(trainData[, numeric_cols & !names(trainData) %in% c("salary")])
output$correlationPlot <- renderPlot({
corr_df <- as.data.frame(as.table(correlations))
names(corr_df) <- c("Var1", "Var2", "cor")
corr_df <- corr_df[order(-abs(corr_df$cor)), ]
ggplot(corr_df, aes(x = Var1, y = Var2, fill = cor)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", limit = c(-1, 1),
name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
# Create a logistic regression model and summary
output$modelSummary <- renderPrint({
summary(rf_model)
})
})
observeEvent(input$predict, {
req(model())
new_data <- data.frame(
age = input$age,
workclass = factor(input$workclass, levels = levels(who_data()$workclass)),
fnlwgt = input$fnlwgt,
education = factor(input$education, levels = levels(who_data()$education)),
education_no_of_years = input$education_no_of_years,
marital_status = factor(input$marital_status, levels = levels(who_data()$marital_status)),
occupation = factor(input$occupation, levels = levels(who_data()$occupation)),
race = factor(input$race, levels = levels(who_data()$race)),
sex = factor(input$sex, levels = levels(who_data()$sex)),
capital_gain = input$capital_gain,
capital_loss = input$capital_loss,
working_hours_per_week = input$working_hours_per_week,
native_contienent = factor(input$native_contienent, levels = levels(who_data()$native_contienent))
)
prediction <- predict(model(), new_data)
output$prediction <- renderText({
paste("Predicted Salary Class:", prediction)
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(caret)
library(dplyr)
library(ggplot2)
library(randomForest)
library(readxl)
# Define UI
ui <- fluidPage(
titlePanel("WHO Data Analysis and Salary Prediction"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Upload Excel File", accept = c(".xlsx")),
actionButton("process", "Process Data"),
h4("Salary Prediction"),
numericInput("age", "Age:", min = 0, max = 100, value = 30),
selectInput("workclass", "Work Class:", choices = NULL),
numericInput("fnlwgt", "Final Weight:", value = 100000),
selectInput("education", "Education:", choices = NULL),
numericInput("education_no_of_years", "Years of Education:", value = 12),
selectInput("marital_status", "Marital Status:", choices = NULL),
selectInput("occupation", "Occupation:", choices = NULL),
selectInput("race", "Race:", choices = NULL),
selectInput("sex", "Sex:", choices = NULL),
numericInput("capital_gain", "Capital Gain:", value = 0),
numericInput("capital_loss", "Capital Loss:", value = 0),
numericInput("working_hours_per_week", "Working Hours per Week:", value = 40),
selectInput("native_contienent", "Native Continent:", choices = NULL),
actionButton("predict", "Predict Salary")
),
mainPanel(
plotOutput("correlationPlot"),
verbatimTextOutput("modelSummary"),
textOutput("prediction")
)
)
)
# Define server logic
server <- function(input, output, session) {
who_data <- reactiveVal(NULL)
model <- reactiveVal(NULL)
observeEvent(input$process, {
req(input$file)
# Read the data
data <- read_excel(input$file$datapath)
# Data preprocessing
data <- na.omit(data)
data$workclass <- as.factor(data$workclass)
data$education <- as.factor(data$education)
data$marital_status <- as.factor(data$marital_status)
data$occupation <- as.factor(data$occupation)
data$race <- as.factor(data$race)
data$sex <- as.factor(data$sex)
data$native_contienent <- as.factor(data$native_contienent)
data$salary <- as.factor(data$salary)
who_data(data)
# Update choices for select inputs
updateSelectInput(session, "workclass", choices = levels(data$workclass))
updateSelectInput(session, "education", choices = levels(data$education))
updateSelectInput(session, "marital_status", choices = levels(data$marital_status))
updateSelectInput(session, "occupation", choices = levels(data$occupation))
updateSelectInput(session, "race", choices = levels(data$race))
updateSelectInput(session, "sex", choices = levels(data$sex))
updateSelectInput(session, "native_contienent", choices = levels(data$native_contienent))
# Split the data into training and testing sets
set.seed(123)
trainIndex <- createDataPartition(data$salary, p = 0.8, list = FALSE)
trainData <- data[trainIndex,]
# Build the Prediction Model
rf_model <- randomForest(salary ~ ., data = trainData, importance = TRUE)
model(rf_model)
# Feature selection and correlation plot
numeric_cols <- sapply(trainData, is.numeric)
correlations <- cor(trainData[, numeric_cols & !names(trainData) %in% c("salary")])
output$correlationPlot <- renderPlot({
corr_df <- as.data.frame(as.table(correlations))
names(corr_df) <- c("Var1", "Var2", "cor")
corr_df <- corr_df[order(-abs(corr_df$cor)), ]
ggplot(corr_df, aes(x = Var1, y = Var2, fill = cor)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", limit = c(-1, 1),
name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
# Create a model summary
output$modelSummary <- renderPrint({
summary(rf_model)
})
})
observeEvent(input$predict, {
req(model())
new_data <- data.frame(
age = input$age,
workclass = factor(input$workclass, levels = levels(who_data()$workclass)),
fnlwgt = input$fnlwgt,
education = factor(input$education, levels = levels(who_data()$education)),
education_no_of_years = input$education_no_of_years,
marital_status = factor(input$marital_status, levels = levels(who_data()$marital_status)),
occupation = factor(input$occupation, levels = levels(who_data()$occupation)),
race = factor(input$race, levels = levels(who_data()$race)),
sex = factor(input$sex, levels = levels(who_data()$sex)),
capital_gain = input$capital_gain,
capital_loss = input$capital_loss,
working_hours_per_week = input$working_hours_per_week,
native_contienent = factor(input$native_contienent, levels = levels(who_data()$native_contienent))
)
prediction <- predict(model(), new_data)
output$prediction <- renderText({
paste("Predicted Salary Class:", prediction)
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(caret)
library(dplyr)
library(ggplot2)
library(randomForest)
library(readxl)
# Define UI
ui <- fluidPage(
titlePanel("WHO Data Analysis and Salary Prediction"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Upload Excel File", accept = c(".xlsx")),
actionButton("process", "Process Data"),
h4("Salary Prediction"),
numericInput("age", "Age:", min = 0, max = 100, value = 30),
selectInput("workclass", "Work Class:", choices = NULL),
numericInput("fnlwgt", "Final Weight:", value = 100000),
selectInput("education", "Education:", choices = NULL),
numericInput("education_no_of_years", "Years of Education:", value = 12),
selectInput("marital_status", "Marital Status:", choices = NULL),
selectInput("occupation", "Occupation:", choices = NULL),
selectInput("race", "Race:", choices = NULL),
selectInput("sex", "Sex:", choices = NULL),
numericInput("capital_gain", "Capital Gain:", value = 0),
numericInput("capital_loss", "Capital Loss:", value = 0),
numericInput("working_hours_per_week", "Working Hours per Week:", value = 40),
selectInput("native_contienent", "Native Continent:", choices = NULL),
actionButton("predict", "Predict Salary")
),
mainPanel(
plotOutput("correlationPlot"),
verbatimTextOutput("modelSummary"),
textOutput("prediction")
)
)
)
# Define server logic
server <- function(input, output, session) {
who_data <- reactiveVal(NULL)
model <- reactiveVal(NULL)
observeEvent(input$process, {
req(input$file)
# Read the data
data <- read_excel(input$file$datapath)
# Data preprocessing
data <- na.omit(data)
data$workclass <- as.factor(data$workclass)
data$education <- as.factor(data$education)
data$marital_status <- as.factor(data$marital_status)
data$occupation <- as.factor(data$occupation)
data$race <- as.factor(data$race)
data$sex <- as.factor(data$sex)
data$native_contienent <- as.factor(data$native_contienent)
data$salary <- as.factor(data$salary)
who_data(data)
# Update choices for select inputs
updateSelectInput(session, "workclass", choices = levels(data$workclass))
updateSelectInput(session, "education", choices = levels(data$education))
updateSelectInput(session, "marital_status", choices = levels(data$marital_status))
updateSelectInput(session, "occupation", choices = levels(data$occupation))
updateSelectInput(session, "race", choices = levels(data$race))
updateSelectInput(session, "sex", choices = levels(data$sex))
updateSelectInput(session, "native_contienent", choices = levels(data$native_contienent))
# Split the data into training and testing sets
set.seed(123)
trainIndex <- createDataPartition(data$salary, p = 0.8, list = FALSE)
trainData <- data[trainIndex,]
# Build the Prediction Model
rf_model <- randomForest(salary ~ ., data = trainData, importance = TRUE)
model(rf_model)
# Feature selection and correlation plot
numeric_cols <- sapply(trainData, is.numeric)
correlations <- cor(trainData[, numeric_cols & !names(trainData) %in% c("salary")])
output$correlationPlot <- renderPlot({
corr_df <- as.data.frame(as.table(correlations))
names(corr_df) <- c("Var1", "Var2", "cor")
corr_df <- corr_df[order(-abs(corr_df$cor)), ]
ggplot(corr_df, aes(x = Var1, y = Var2, fill = cor)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", limit = c(-1, 1),
name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
# Create a model summary
output$modelSummary <- renderPrint({
summary(rf_model)
})
})
observeEvent(input$predict, {
req(model())
new_data <- data.frame(
age = input$age,
workclass = factor(input$workclass, levels = levels(who_data()$workclass)),
fnlwgt = input$fnlwgt,
education = factor(input$education, levels = levels(who_data()$education)),
education_no_of_years = input$education_no_of_years,
marital_status = factor(input$marital_status, levels = levels(who_data()$marital_status)),
occupation = factor(input$occupation, levels = levels(who_data()$occupation)),
race = factor(input$race, levels = levels(who_data()$race)),
sex = factor(input$sex, levels = levels(who_data()$sex)),
capital_gain = input$capital_gain,
capital_loss = input$capital_loss,
working_hours_per_week = input$working_hours_per_week,
native_contienent = factor(input$native_contienent, levels = levels(who_data()$native_contienent))
)
prediction <- predict(model(), new_data)
output$prediction <- renderText({
paste("Predicted Salary Class:", prediction)
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
library(dplyr)
library(ggplot2)
library(randomForest)
library(caret)
shiny::runApp()
https://github.com/nicefaa/Salary-Prediction-Model.git
library(readxl)
who_data_Project_1_xlsx <- read_excel("who_data_Project_1.xlsx.xlsx")
View(who_data_Project_1_xlsx)
packrat::snapshot()
packrat::snapshot()
library(rsconnect)
rsconnect::deployApp(appDir = "C:/Users/Dell 7490/Desktop/Salary Prediction Model",
appName = "Salary Prediction Model",
account = "your-rsconnect-account")
shiny::runApp()
rsconnect::showLogs()
runApp()
library(randomForest)
library(shiny)
runApp()
library(randomForest)
# Example of training a model
model <- randomForest(salary ~ age + workclass + fnlwgt + education +
education_no_of_years + marital_status + occupation +
race + sex + capital_gain + capital_loss +
working_hours_per_week + native_contienent,
data = who_data)
str(who_data)
server <- function(input, output) {
observeEvent(input$predict, {
new_data <- data.frame(
age = input$age,
workclass = factor(input$workclass, levels = levels(who_data$workclass)),
fnlwgt = input$fnlwgt,
education = factor(input$education, levels = levels(who_data$education)),
education_no_of_years = input$education_no_of_years,
marital_status = factor(input$marital_status, levels = levels(who_data$marital_status)),
occupation = factor(input$occupation, levels = levels(who_data$occupation)),
race = factor(input$race, levels = levels(who_data$race)),
sex = factor(input$sex, levels = levels(who_data$sex)),
capital_gain = input$capital_gain,
capital_loss = input$capital_loss,
working_hours_per_week = input$working_hours_per_week,
native_contienent = factor(input$native_contienent, levels = levels(who_data$native_contienent))
)
# Debugging: Output the new_data and model class
print(new_data)
print(class(model))
# Check if the model is a valid random forest model
if (inherits(model, "randomForest")) {
prediction <- predict(model, new_data)
output$prediction <- renderText({
paste("Predicted Salary Class:", prediction)
})
} else {
output$prediction <- renderText({
"Error: Model is not a valid random forest model."
})
}
})
}
runApp()
runApp()
runApp()
shiny::runApp()
library(shiny)
library(ggplot2)
library(randomForest)
library(caret)
runApp()
